<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityFormMode;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;
use Drupal\Core\Config\FileStorage;
use Drupal\estimate\EstimateParseXML as XML;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_unistall().
 */

const CUSTOM_USER_FIELDS = array(
    'field_throughput_low',
    'field_throughput_high',
    'field_sratio_low',
    'field_sratio_high',
    'field_sq_foot_low',
    'field_sq_foot_high',
    'field_severity_low',
    'field_severity_high',
    'field_rrratio_low',
    'field_rrratio_high',
    'field_parts_ratio_low',
    'field_parts_ratio_high',
    'field_phro_high',
    'field_phro_low',
    'field_labor_ratio_low',
    'field_labor_ratio_high',
    'field_lhro_high',
    'field_lhro_low',
    'field_estimator_id',
    'field_cycle_time_low',
    'field_cycle_time_high',
    'field_com_name_us',
    'field_bhro_low',
    'field_bhro_high',
);

const NODE_CREATION_FIELD = 'field_com_name_es_node_field_data__node__field_creationdt.field_creationdt_value';

function estimate_modules_installed() {
    foreach (\CUSTOM_USER_FIELDS as $key) {
        if ($field_config_view = EntityViewDisplay::load('user.user.default')){
            $field_config_view->setComponent($key, [
                'region' => 'content',
            ])->save();
        }

        if ($field_config_form = EntityFormDisplay::load('user.user.default')){
            $field_config_form->setComponent($key, [
                'region' => 'content',
            ])->save();
        }
    }

    $module_path = \Drupal::service('extension.list.module')->getPath('estimate') . '/config/override';
    $file = new FileStorage($module_path);
    foreach ($file->listAll() as $id) {
        $config_data = $file->read($id);
        $config = \Drupal::configFactory()->getEditable($id);
        $config->setData($config_data)->save();
    }
}
function estimate_uninstall(){
    if ($view_name = \Drupal::service('config.factory')->getEditable('views.view.estimate_view')){
        $view_name->delete();
    }

    if ($entity_form_display = EntityFormMode::load('node.content_view_in_profile')){
        $entity_form_display->delete();
    }

    $types = array('estimate', 'company','estimator','insurance_company');
    foreach ($types as $type_name){
        $storage_handler = \Drupal::entityTypeManager()->getStorage("node");
        $entities = $storage_handler->loadByProperties(["type" => $type_name]);
        $storage_handler->delete($entities);

        $content_type = \Drupal::entityTypeManager()->getStorage('node_type')->load($type_name);
        if ($content_type){
            $content_type->delete();
        }
    }

    foreach (\CUSTOM_USER_FIELDS as $field_name) {
        $field = FieldConfig::loadByName('user', 'user', $field_name);
        if (!empty($field)) {
            $field->delete();
        }

        $field_storage = FieldStorageConfig::loadByName('user', $field_name);
        if (!empty($field_storage)) {
            $field_storage->delete();
        }
    }

    //Purging fields data after uninstalling module.
    if (!empty(\Drupal::state()->get('field.storage.deleted'))){
        field_purge_batch(1000);
    }
}

if (!function_exists('getallheaders')){
    function getallheaders(){
        global $_SERVER;
        $headers = [];
        foreach ($_SERVER as $name => $value){
            if (substr($name, 0, 5) == 'HTTP_'){
                $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;
            }
        }
        return $headers;
    }
}

function check_admin(){
    $account = \Drupal::currentUser();
    return in_array('administrator', $account->getRoles());
}

function estimate_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id){
    if (check_admin()) return;

    foreach (\CUSTOM_USER_FIELDS as $form_field){
        $form[$form_field]['#access'] = false;
    }
}

function estimate_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
    $type = $node->bundle();
    if (($type == 'estimate' || $type == 'company') && !check_admin()) return AccessResult::forbidden();

    return AccessResult::neutral();
}

function estimate_views_pre_build(ViewExecutable $view){
    if ($view->id() != 'estimate_view') return;

    if (check_admin()){
        $view->argument = [];
    }
}

function estimate_query_views_estimate_view_alter(AlterableInterface &$query){
    $view=$query->getMetaData('view');

    $datetime = new DateTime(date('r',$view->exposed_data["current_period"]));
    $userInput = $view->getExposedInput();
    if (isset($userInput["field_creationdt_value"])) {
        if ($userInput["field_creationdt_value"] == 1) {
            $view->header["area"]->options["content"]["value"] = "Day: " . $datetime->format('d F Y');
        } elseif ($userInput["field_creationdt_value"] == 2) {
            $view->header["area"]->options["content"]["value"] = "Week: " . $datetime->format('W-Y');
        } elseif ($userInput["field_creationdt_value"] == 3) {
            $view->header["area"]->options["content"]["value"] = "Month: " . $datetime->format('F Y');
        } elseif ($userInput["field_creationdt_value"] == 4) {
            $view->header["area"]->options["content"]["value"] = "Year: " . $datetime->format('Y');
        } else {
            $view->header["area"]->options["content"]["value"] = 'All date';
        }
    }
}
function estimate_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
    if ($form['#id'] !== "views-exposed-form-estimate-view-admin-page-1" and $form['#id'] !== 'views-exposed-form-estimate-view-page-1') return;

    $userInput = $form_state->getUserInput();
    if (empty($userInput["current_period"]) || ($userInput["field_creationdt_value"] == 'All')) {
        $userInput["current_period"] = time();
    }
    $sign = null;
    if (isset($userInput["change_period"])){
        if ($userInput["change_period"] == 1) {
            $sign = '+';
        } elseif ($userInput["change_period"] == 2) {
            $sign = '-';
        }
    }
    unset($userInput["change_period"]);
    $datetime = new DateTime(date('r', $userInput["current_period"]));

    $min = $max ='';
    if (isset($userInput["field_creationdt_value"])) {
        if ($userInput["field_creationdt_value"] == 1) {
            if ($sign) {
                $datetime->modify("{$sign}1 day");
            }
            $userInput["current_period"] = $datetime->getTimestamp();
            $datetime->setTime(0, 0, 0);
            $min = $datetime->format('m/d/Y H:i');
            $datetime->setTime(23, 59, 59);
            $max = $datetime->format('m/d/Y H:i');
        } elseif ($userInput["field_creationdt_value"] == 2) {
            if ($sign) {
                $datetime->modify("{$sign}1 week");
            }
            $userInput["current_period"] = $datetime->getTimestamp();
            $datetime->setTime(0, 0, 0);
            $datetime->modify('Last Monday');
            $min = $datetime->format('m/d/Y H:i');
            $datetime->modify('Next Sunday');
            $datetime->setTime(23, 59, 59);
            $max = $datetime->format('m/d/Y H:i');
        } elseif ($userInput["field_creationdt_value"] == 3) {
            if ($sign) {
                $datetime->modify("{$sign}1 month");
            }
            $userInput["current_period"] = $datetime->getTimestamp();
            $datetime->setTime(0, 0, 0);
            $datetime->setDate($datetime->format('Y'), $datetime->format('m'), 1);
            $min = $datetime->format('m/d/Y H:i');
            $datetime->setDate($datetime->format('Y'), $datetime->format('m'), $datetime->format('t'));
            $datetime->setTime(23, 59, 59);
            $max = $datetime->format('m/d/Y H:i');
        } elseif ($userInput["field_creationdt_value"] == 4) {
            if ($sign) {
                $datetime->modify("{$sign}1 year");
            }
            $userInput["current_period"] = $datetime->getTimestamp();
            $datetime->setTime(0, 0, 0);
            $datetime->setDate($datetime->format('Y'), 1, 1);
            $min = $datetime->format('m/d/Y H:i');
            $datetime->setTime(23, 59, 59);
            $datetime->setDate($datetime->format('Y'), 12, 31);
            $max = $datetime->format('m/d/Y H:i');
        }
    }
    $userInput["field_creation_date_time_value"]["min"] = $min;
    $userInput["field_creation_date_time_value"]["max"] = $max;

    $form_state->setUserInput($userInput);
}
function estimate_query_views_estimate_view_admin_alter(AlterableInterface &$query){
  $view=$query->getMetaData('view');

  $datetime = new DateTime(date('r',$view->exposed_data["current_period"]));
  $userInput = $view->getExposedInput();
    if (isset($userInput["field_creationdt_value"])) {
        if ($userInput["field_creationdt_value"] == 1) {
            $view->header["area"]->options["content"]["value"] = "Day: " . $datetime->format('d F Y');
        } elseif ($userInput["field_creationdt_value"] == 2) {
            $view->header["area"]->options["content"]["value"] = "Week: " . $datetime->format('W-Y');
        } elseif ($userInput["field_creationdt_value"] == 3) {
            $view->header["area"]->options["content"]["value"] = "Month: " . $datetime->format('F Y');
        } elseif ($userInput["field_creationdt_value"] == 4) {
            $view->header["area"]->options["content"]["value"] = "Year: " . $datetime->format('Y');
        } else {
            $view->header["area"]->options["content"]["value"] = 'All date';
        }
    }
}

function clear_expose_filter_node_creation_codition(&$condition, $first = false){
    if (is_array($condition) && !empty($condition['field'])){
        if ($condition['field'] == NODE_CREATION_FIELD){
            return null;
        }
        return $condition;
    }
    if ($first){
        $conditions = &$condition;
    } else {
        $conditions = $condition->conditions();
    }
    foreach ($conditions as $key => &$cond){
        if (is_array($cond)){
            if (is_object($cond['field'])){
                clear_expose_filter_node_creation_codition($cond['field']->conditions(), 1);
                continue;
            }
            $cond = clear_expose_filter_node_creation_codition($cond);
            if (is_null($cond)) unset($conditions[$key]);
        }
    }
}

function estimate_views_pre_render(ViewExecutable $view){
    if ($view->id() == 'estimate_view') {
        return _calcResultUserView($view);
    }

    if ($view->id() == 'estimate_view_admin') {
        return _calcResultAdminView($view);
    }
    return $view;
}

function _calcResultUserView($view){
    $time_period = $view->exposed_data['field_creationdt_value'];
    $holidays = array();
    $countDays = 0;
    switch ($time_period) {
        case 'All':
            $countDays = countDays("2000-01-01", date("Y-m-d"), $holidays);
            break;
        case '+1 day':
            $countDays = 1;
            break;
        case '+1 week':
            $countDays = 5;
            break;
        case '+1 mounth':
            $countDays = countDaysMounth(date("Y"), date("m"), array(0, 6)); ;
            break;
        case '+1 year':
            $countDays = countDays(date("Y").'-01-01', date("Y").'-12-31', $holidays);
            break;
    }

    foreach ($view->result as $resultRow){
        $count_estimates = $resultRow->field_com_name_es_node_field_data_nid;
        $sales_collision_sum = $resultRow->field_com_name_es_node_field_data__node__field_totalamt_p_fi ?? 0;

        // Cycle Time
        $resultRow->field_com_name_es_node_field_data__node__field_arrival_dt_fi = ($resultRow->avgCycleTime ?? 0 / 86400);

        // Throughput
        $resultRow->field_com_name_es_node_field_data__node__field_creationdt_fi = round($count_estimates / $countDays, 3);

        $avgSquareFoot = $severity = $body_hourse = $paint_hourse = $labor_hours = 0;
        if($count_estimates > 0){
            //Square Foot Efficiency
            $avgSquareFoot = $resultRow->node_field_data_user__field_com_name_us__node__field_square_ ? ($sales_collision_sum / $count_estimates) /
                $resultRow->node_field_data_user__field_com_name_us__node__field_square_ : 0;

            // Severity
            $severity = $sales_collision_sum / $count_estimates;

            // Body Hours / RO
            $body_hourse = round($resultRow->field_com_name_es_node_field_data__node__field_totalhours_b_ / $count_estimates, 3);

            // Paint Hours / RO
            $paint_hourse = round($resultRow->field_com_name_es_node_field_data__node__field_totalhours_p_ / $count_estimates, 3);

            // Labor Hours / RO
            $labor_sum_labor_hours = 0;
            foreach (XML::SALES_LABOR as $type => $not_used){
                $type = strtolower($type);
                $field1 = 'field_com_name_es_node_field_data__node__field_'.$type.'_hours_fie';
                $field2 = 'field_com_name_es_node_field_data__node__field_'.$type.'_hours_fi';
                if (isset($resultRow->$field1)){
                    $labor_sum_labor_hours += $resultRow->$field1;

                }
                if (isset($resultRow->$field2)){
                    $labor_sum_labor_hours += $resultRow->$field2;
                }

            }
            $labor_hours = round($labor_sum_labor_hours / $count_estimates, 3);
        }

        //Square Foot Efficiency
        $resultRow->node_field_data_user__field_com_name_us__node__field_square_ = round($avgSquareFoot,3);

        // Severity
        $resultRow->field_com_name_es_node_field_data__node__field_totalamt_p_fi = $severity;

        $labor_ratio = $parts_ratio = $sublet_ratio = $parts_sum = 0;
        if($sales_collision_sum > 0){
            // Labor Ratio
            $labor_sum = 0;
            foreach (XML::SALES_LABOR as $type => $not_used){
                $type = strtolower($type);
                $field = 'field_com_name_es_node_field_data__node__field_'.$type.'_amount_fi';
                if (isset($resultRow->$field)){
                    $labor_sum += $resultRow->$field;
                }
            }
            $labor_ratio = round($labor_sum / $sales_collision_sum, 3);

            // Parts Ratio
            $parts_sum = 0;
            foreach (XML::SALES_PARTS as $type => $not_used){
                $type = strtolower($type);
                $field = 'field_com_name_es_node_field_data__node__field_pt_'.$type.'_field_';
                if (isset($resultRow->$field)){
                    $parts_sum += $resultRow->$field;
                }
            }
            $parts_ratio = round($parts_sum / $sales_collision_sum, 3);

            // Sublet Ratio
            $sublet_ratio = round($resultRow->field_com_name_es_node_field_data__node__field_pt_pas_field_ / $sales_collision_sum, 3);
        }
        // Labor Ratio
        $resultRow->field_com_name_es_node_field_data__node__field_op4_amount_fi = $labor_ratio;

        // Parts Ratio
        $resultRow->field_com_name_es_node_field_data__node__field_pt_paa_field_ = $parts_ratio;

        // Sublet Ratio
        $resultRow->field_com_name_es_node_field_data__node__field_pt_pas_field_ = $sublet_ratio;

        // Body Hours / RO
        $resultRow->field_com_name_es_node_field_data__node__field_totalhours_b_ = $body_hourse;

        // Paint Hours / RO
        $resultRow->field_com_name_es_node_field_data__node__field_totalhours_p_ = $paint_hourse;

        // Labor Hours / RO
        $resultRow->field_com_name_es_node_field_data__node__field_op4_hours_fie = $labor_hours;

        // Repair / Replace Ratio
        $labor_sum_op9_op10 = $labor_sum_op11 = 0;
        foreach (XML::SALES_LABOR as $type => $not_used){
            $type = strtolower($type);
            $field1 = 'field_com_name_es_node_field_data__node__field_' . $type . '_hours_fie';
            $field2 = 'field_com_name_es_node_field_data__node__field_' . $type . '_hours_fi';
            if ($type == 'op9' || $type == 'op10'){
                if (isset($resultRow->$field1)) {
                    $labor_sum_op9_op10 += $resultRow->$field1;
                }
                if (isset($resultRow->$field2)) {
                    $labor_sum_op9_op10 += $resultRow->$field2;
                }
            }
            if ($type == 'op11'){
                if (isset($resultRow->$field1)) {
                    $labor_sum_op11 += $resultRow->$field1;
                }
                if (isset($resultRow->$field2)) {
                    $labor_sum_op11 += $resultRow->$field2;
                }
            }
        }
        $repair_ratio = $labor_sum_op11 > 0 ? round($labor_sum_op9_op10/ $labor_sum_op11,3) : 0;
        $resultRow->field_com_name_es_node_field_data__node__field_pt_pag_field_ = $repair_ratio;

        // New / Used / LKQ
        $parts_sum_new = $parts_sum_used = $parts_sum_lkq = 0;
        foreach (XML::SALES_PARTS as $type => $not_used){
            $type = strtolower($type);
            $field = 'field_com_name_es_node_field_data__node__field_pt_'.$type.'_field_';
            if ($type == 'pan' || $type == 'pand' || $type == 'pap') {
                if (isset($resultRow->$field)) {
                    $parts_sum_new += $resultRow->$field;
                }
            }
            if ($type == 'pal' || $type == 'par' || $type == 'pam') {
                if (isset($resultRow->$field)) {
                    $parts_sum_used += $resultRow->$field;
                }
            }
            if ($type == 'paa') {
                if (isset($resultRow->$field)) {
                    $parts_sum_lkq += $resultRow->$field;
                }
            }
        }
        if ($parts_sum > 0){
            $parts_sum_new = round($parts_sum_new / $parts_sum, 3);
            $parts_sum_used = round($parts_sum_used / $parts_sum, 3);
            $parts_sum_lkq = round($parts_sum_lkq / $parts_sum, 3);
        }
        $resultRow->field_com_name_es_node_field_data__node__field_esaltid_field = $parts_sum_new.'/'.$parts_sum_used.'/'.$parts_sum_lkq;

        $view->result[1] = clone $resultRow;
        $view->result[2] = clone $resultRow;
    }

    $fields = getUserFields();

    // add rows with min and max value
    foreach ($view->result as $key => $resultRow) {
        if ($key === 0 || $key === 2) {
            $value = ($key === 0) ? 'low' : 'high';

            // Cycle Time
            $resultRow->field_com_name_es_node_field_data__node__field_arrival_dt_fi = $fields['field_cycle_time_' . $value];

            //Throughput
            $resultRow->field_com_name_es_node_field_data__node__field_creationdt_fi = $fields['field_throughput_' . $value];

            //Square Foot Efficiency
            $resultRow->node_field_data_user__field_com_name_us__node__field_square_ = $fields['field_sq_foot_' . $value];

            // Severity
            $resultRow->field_com_name_es_node_field_data__node__field_totalamt_p_fi = $fields['field_severity_' . $value];

            // Labor Ratio
            $resultRow->field_com_name_es_node_field_data__node__field_op4_amount_fi = $fields['field_labor_ratio_' . $value];

            // Parts Ratio
            $resultRow->field_com_name_es_node_field_data__node__field_pt_paa_field_ = $fields['field_parts_ratio_' . $value];

            // Sublet Ratio
            $resultRow->field_com_name_es_node_field_data__node__field_op16_amount_f = $fields['field_sratio_' . $value];

            // New / Used / LKQ
            $resultRow->field_com_name_es_node_field_data__node__field_esaltid_field = "";

            // Body Hours / RO
            $resultRow->field_com_name_es_node_field_data__node__field_totalhours_b_ = $fields['field_bhro_' . $value];

            // Paint Hours / RO
            $resultRow->field_com_name_es_node_field_data__node__field_totalhours_p_ = $fields['field_phro_' . $value];

            // Labor Hours / RO
            $resultRow->field_com_name_es_node_field_data__node__field_op4_hours_fie = $fields['field_lhro_' . $value];

            // Repair / Replace Ratio
            $resultRow->field_com_name_es_node_field_data__node__field_pt_pag_field_ = $fields['field_rrratio_' . $value];
        }
    }


    return $view;
}

function _calcResultAdminView($view){
    $time_period = $view->exposed_data['field_creationdt_value'];
    $holidays = array();
    $countDays = 0;
    switch ($time_period) {
        case 'All':
            $countDays = countDays("2000-01-01", date("Y-m-d"), $holidays);
            break;
        case '+1 day':
            $countDays = 1;
            break;
        case '+1 week':
            $countDays = 5;
            break;
        case '+1 mounth':
            $countDays = countDaysMounth(date("Y"), date("m"), array(0, 6)); ;
            break;
        case '+1 year':
            $countDays = countDays(date("Y").'-01-01', date("Y").'-12-31', $holidays);
            break;
    }

    foreach ($view->result as $resultRow){
        $count_estimates = $resultRow->nid;
        $sales_collision_sum = $resultRow->node__field_totalamt_p_field_totalamt_p_value ?? 0;

        // Cycle Time
        $resultRow->node__field_arrival_dt_field_arrival_dt_value = ($resultRow->avgCycleTime ?? 0 / 86400);

        // Throughput
        $resultRow->node__field_creationdt_field_creationdt_value = round($count_estimates / $countDays, 3);

        $avgSquareFoot = $severity = $body_hourse = $paint_hourse = $labor_hours = 0;
        if($count_estimates > 0) {
            //Square Foot Efficiency
            $avgSquareFoot = $resultRow->node_field_data_node__field_com_name_es__node__field_square_ ? ($sales_collision_sum / $count_estimates) /
                $resultRow->node_field_data_node__field_com_name_es__node__field_square_ : 0;

            // Severity
            $severity = $sales_collision_sum / $count_estimates;

            // Body Hours / RO
            $body_hourse = round($resultRow->node__field_totalhours_b_field_totalhours_b_value / $count_estimates, 3);

            // Paint Hours / RO
            $paint_hourse = round($resultRow->node__field_totalhours_p_field_totalhours_p_value / $count_estimates, 3);

            // Labor Hours / RO
            $labor_sum_labor_hours = 0;
            foreach (XML::SALES_LABOR as $type => $not_used) {
                $type = strtolower($type);
                $field1 = 'node__field_' . $type . '_hours_field_' . $type . '_hours_value';
                if (isset($resultRow->$field1)) {
                    $labor_sum_labor_hours += $resultRow->$field1;
                }
                $labor_hours = round($labor_sum_labor_hours / $count_estimates, 3);
            }
        }
        //Square Foot Efficiency
        $resultRow->node_field_data_node__field_com_name_es__node__field_square_ = $avgSquareFoot;

        // Severity
        $resultRow->node__field_totalamt_p_field_totalamt_p_value = $severity;

        $labor_ratio = $parts_ratio = $sublet_ratio = $parts_sum = 0;
        if($sales_collision_sum > 0){
            // Labor Ratio
            $labor_sum = 0;
            foreach (XML::SALES_LABOR as $type => $not_used){
                $type = strtolower($type);
                $field = 'field_com_name_es_node_field_data__node__field_'.$type.'_amount_fi';
                if (isset($resultRow->$field)){
                    $labor_sum += $resultRow->$field;
                }
            }
            $labor_ratio = round($labor_sum / $sales_collision_sum, 3);

            // Parts Ratio
            $parts_sum = 0;
            foreach (XML::SALES_PARTS as $type => $not_used){
                $type = strtolower($type);
                $field = 'node__field_pt_'.$type.'_field_pt_'.$type.'_value';
                if (isset($resultRow->$field)){
                    $parts_sum += $resultRow->$field;
                }
            }
            $parts_ratio = round($parts_sum / $sales_collision_sum, 3);

            // Sublet Ratio
            $sublet_ratio = round($resultRow->node__field_pt_pas_field_pt_pas_value / $sales_collision_sum, 3);
        }
        // Labor Ratio
        $resultRow->node__field_op4_amount_field_op4_amount_value = $labor_ratio;

        // Parts Ratio
        $resultRow->node__field_pt_paa_field_pt_paa_value = $parts_ratio;

        // Sublet Ratio
        $resultRow->node__field_pt_pas_field_pt_pas_value = $sublet_ratio;

        // Body Hours / RO
        $resultRow->node__field_totalhours_b_field_totalhours_b_value = $body_hourse;

        // Paint Hours / RO
        $resultRow->node__field_totalhours_p_field_totalhours_p_value = $paint_hourse;

        // Labor Hours / RO
        $resultRow->node__field_op4_hours_field_op4_hours_value = $labor_hours;

        // Repair / Replace Ratio
        $labor_sum_op9_op10 = $labor_sum_op11 = 0;
        foreach (XML::SALES_LABOR as $type => $not_used){
            $type = strtolower($type);
            $field1 = 'node__field_'.$type.'_hours_field_'.$type.'_hours_value';
            if ($type == 'op9' || $type == 'op10'){
                if (isset($resultRow->$field1)) {
                    $labor_sum_op9_op10 += $resultRow->$field1;
                }
            }
            if ($type == 'op11'){
                if (isset($resultRow->$field1)) {
                    $labor_sum_op11 += $resultRow->$field1;
                }
            }
        }
        $repair_ratio = $labor_sum_op11 > 0 ? round($labor_sum_op9_op10/ $labor_sum_op11,3) : 0;
        $resultRow->node__field_op16_amount_field_op16_amount_value = $repair_ratio;

        // New / Used / LKQ
        $parts_sum_new = $parts_sum_used = $parts_sum_lkq = 0;
        foreach (XML::SALES_PARTS as $type => $not_used){
            $type = strtolower($type);
            $field = 'node__field_pt_'.$type.'_field_pt_'.$type.'_value';
            if ($type == 'pan' || $type == 'pand' || $type == 'pap') {
                if (isset($resultRow->$field)) {
                    $parts_sum_new += $resultRow->$field;
                }
            }
            if ($type == 'pal' || $type == 'par' || $type == 'pam') {
                if (isset($resultRow->$field)) {
                    $parts_sum_used += $resultRow->$field;
                }
            }
            if ($type == 'paa') {
                if (isset($resultRow->$field)) {
                    $parts_sum_lkq += $resultRow->$field;
                }
            }
        }
        if ($parts_sum > 0){
            $parts_sum_new = round($parts_sum_new / $parts_sum, 3);
            $parts_sum_used = round($parts_sum_used / $parts_sum, 3);
            $parts_sum_lkq = round($parts_sum_lkq / $parts_sum, 3);
        }
        $resultRow->node__field_pt_pan_field_pt_pan_value = $parts_sum_new;
        $resultRow->node__field_pt_pag_field_pt_pag_value = $parts_sum_used;
        $resultRow->node__field_pt_paa_field_pt_paa_value = $parts_sum_lkq;
    }

    return $view;
}

function estimate_preprocess_page(&$variables) {
    switch (\Drupal::service('path.current')->getPath()) {
        case '/estimate-view-admin' :
        {
            if (!check_admin()) {
                (new RedirectResponse('estimate-view'))->send();
                exit();
            }
            break;
        }
        case '/estimate-view' :
        {
            if (check_admin()) {
                (new RedirectResponse('estimate-view-admin'))->send();
                exit();
            }
            break;
        }
    }
}

function countDays($startDate,$endDate,$holidays){
    $endDate = strtotime($endDate);
    $startDate = strtotime($startDate);

    $days = ($endDate - $startDate) / 86400 + 1;

    $no_full_weeks = floor($days / 7);
    $no_remaining_days = fmod($days, 7);

    $the_first_day_of_week = date("N", $startDate);
    $the_last_day_of_week = date("N", $endDate);

    if ($the_first_day_of_week <= $the_last_day_of_week) {
        if ($the_first_day_of_week <= 6 && 6 <= $the_last_day_of_week) $no_remaining_days--;
        if ($the_first_day_of_week <= 7 && 7 <= $the_last_day_of_week) $no_remaining_days--;
    }
    else {
        if ($the_first_day_of_week == 7) {
            $no_remaining_days--;

            if ($the_last_day_of_week == 6) {
                $no_remaining_days--;
            }
        }
        else {
            $no_remaining_days -= 2;
        }
    }

    $workingDays = $no_full_weeks * 5;
    if ($no_remaining_days > 0 )
    {
        $workingDays += $no_remaining_days;
    }

    foreach($holidays as $holiday){
        $time_stamp=strtotime($holiday);
        if ($startDate <= $time_stamp && $time_stamp <= $endDate && date("N",$time_stamp) != 6 && date("N",$time_stamp) != 7)
            $workingDays--;
    }

    return $workingDays;
}

function countDaysMounth($year, $month, $ignore) {
    $count = 0;
    $counter = mktime(0, 0, 0, $month, 1, $year);
    while (date("n", $counter) == $month) {
        if (!in_array(date("w", $counter), $ignore)) {
            $count++;
        }
        $counter = strtotime("+1 day", $counter);
    }
    return $count;
}

// get values CUSTOM USER FIELDS
function getUserFields(){

    $result = [];
    $user = User::load(\Drupal::currentUser()->id());

    foreach (\CUSTOM_USER_FIELDS as $field){
        $result[$field] = $user->$field->value;
    }
    return $result;
}