<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\Entity\EntityFormMode;
use Drupal\Core\Form\FormStateInterface;

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;

use Drupal\estimate\EstimateParseXML as XML;
use Drupal\estimate\EstimateConfiguration;

use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_unistall().
 */

const METRICS = array(
    1 => [
        'title' => 'Cycle Time',
        'path' => '/cycle-time'
    ],
    2 => [
        'title' => 'Throughput',
        'path' => '/throughput'
    ],
    3 => [
        'title' => 'Square Foot Efficiency',
        'path' => '/square-foot-efficiency'
    ],
    4 => [
        'title' => 'Severenity',
        'path' => '/severenity'
    ],
    5 => [
        'title' => 'Labor Ratio',
        'path' => '/labor-ratio'
    ],
    6 => [
        'title' => 'Parts Ratio',
        'path' => '/parts-ratio'
    ],
    7 => [
        'title' => 'Sublet Ratio',
        'path' => '/sublet-ratio'
    ],
    8 => [
        'title' => 'New Ratio',
        'path' => '/new-ratio'
    ],
    9 => [
        'title' => 'Used Ratio',
        'path' => '/used-ratio'
    ],
    10 => [
        'title' => 'LKQ Ratio',
        'path' => '/lkq-ratio'
    ],
    11 => [
        'title' => 'Repair / Replace Ratio',
        'path' => '/repair-replace-ratio'
    ],
    12 => [
        'title' => 'Labor Hours / RO',
        'path' => '/labor-hours-ro'
    ],
    13 => [
        'title' => 'Paint Hours / RO',
        'path' => '/paint-hours-ro'
    ],
    14 => [
        'title' => 'Body Hours / RO',
        'path' => '/body-hours-ro'
    ],
);

const CUSTOM_USER_FIELDS = array(
    'field_com_name_us',
    'field_estimator_id',
    'field_last_name',
    'field_first_name',
    'field_business_address',
    'field_number_of_shops',

    'field_throughput_low',
    'field_throughput_high',
    'field_sratio_low',
    'field_sratio_high',
    'field_sq_foot_low',
    'field_sq_foot_high',
    'field_severity_low',
    'field_severity_high',
    'field_rrratio_low',
    'field_rrratio_high',
    'field_parts_ratio_low',
    'field_parts_ratio_high',
    'field_phro_high',
    'field_phro_low',
    'field_labor_ratio_low',
    'field_labor_ratio_high',
    'field_lhro_high',
    'field_lhro_low',
    'field_cycle_time_low',
    'field_cycle_time_high',
    'field_bhro_low',
    'field_bhro_high',
    'field_new_low',
    'field_used_low',
    'field_lkq_low',
    'field_new_high',
    'field_used_high',
    'field_lkq_high',

    'field_throughput_min',
    'field_throughput_max',
    'field_sratio_min',
    'field_sratio_max',
    'field_sq_foot_min',
    'field_sq_foot_max',
    'field_severity_min',
    'field_severity_max',
    'field_rrratio_min',
    'field_rrratio_max',
    'field_parts_ratio_min',
    'field_parts_ratio_max',
    'field_phro_max',
    'field_phro_min',
    'field_labor_ratio_min',
    'field_labor_ratio_max',
    'field_lhro_max',
    'field_lhro_min',
    'field_estimator_id',
    'field_cycle_time_min',
    'field_cycle_time_max',
    'field_com_name_us',
    'field_bhro_min',
    'field_bhro_max',
    'field_new_max',
    'field_used_max',
    'field_lkq_max',
    'field_new_min',
    'field_used_min',
    'field_lkq_min',
);

const NODE_CREATION_FIELD = 'field_com_name_es_node_field_data__node__field_creationdt.field_creationdt_value';
function estimate_module_preinstall() {
    //necessary to increase the work the script when installing the plugin
    ini_set('max_execution_time', '900');
}

function estimate_node_presave(Drupal\node\NodeInterface $node) {
    // after editing field_pickup_dt saves the date to a field_pickup_date_time
    // field_pickup_date_time is used for filter in the views
    if ($node->getType() !== 'estimate') return;

    $pikUp = $node->get('field_pickup_dt')->getValue();
    // date format changes
    $CreationDateTime = str_replace(' - ',' ', $pikUp[0]['value']);
    $date_time = new DrupalDateTime($CreationDateTime, new \DateTimeZone('UTC'));
    $pickUpDate = $date_time->format('Y-m-d\TH:i:s');

    $node->set('field_pickup_date_time', $pickUpDate);
}


function estimate_modules_installed() {
    $module_path = \Drupal::service('extension.list.module')->getPath('estimate') . '/config/override';
    $file = new FileStorage($module_path);
    foreach ($file->listAll() as $id) {
        $config_data = $file->read($id);
        $config = \Drupal::configFactory()->getEditable($id);
        $config->setData($config_data)->save();
    }

    // adds default value in custom fields for admin account
    setValueFields();

    EstimateConfiguration::createPages();
    EstimateConfiguration::createMenu();
    EstimateConfiguration::createCustomBlock();

    // create nodes for info button
    createNodesMetric();
}
function estimate_uninstall(){
    if ($view_name = \Drupal::service('config.factory')->getEditable('views.view.estimate_view')){
        $view_name->delete();
    }

    if ($entity_form_display = EntityFormMode::load('node.content_view_in_profile')){
        $entity_form_display->delete();
    }

    $types = array('estimate', 'company', 'estimator', 'insurance_company', 'metric');
    foreach ($types as $type_name){
        $storage_handler = \Drupal::entityTypeManager()->getStorage("node");
        $entities = $storage_handler->loadByProperties(["type" => $type_name]);
        $storage_handler->delete($entities);

        $content_type = \Drupal::entityTypeManager()->getStorage('node_type')->load($type_name);
        if ($content_type){
            $content_type->delete();
        }
    }

    foreach (\CUSTOM_USER_FIELDS as $field_name) {
        $field = FieldConfig::loadByName('user', 'user', $field_name);
        if (!empty($field)) {
            $field->delete();
        }

        $field_storage = FieldStorageConfig::loadByName('user', $field_name);
        if (!empty($field_storage)) {
            $field_storage->delete();
        }
    }

    EstimateConfiguration::removeCustomBlock();
    EstimateConfiguration::removeMenu();
    EstimateConfiguration::removeForm();

    //Purging fields data after uninstalling module.
    if (!empty(\Drupal::state()->get('field.storage.deleted'))){
        field_purge_batch(1000);
    }
}

if (!function_exists('getallheaders')){
    function getallheaders(){
        global $_SERVER;
        $headers = [];
        foreach ($_SERVER as $name => $value){
            if (substr($name, 0, 5) == 'HTTP_'){
                $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;
            }
        }
        return $headers;
    }
}

function check_admin(){
    $account = \Drupal::currentUser();
    return in_array('administrator', $account->getRoles());
}

function estimate_form_alter(&$form, FormStateInterface $form_state, $form_id){
    if ($form_id == "contact_message_contact_us_form"){
        $form['actions']['submit']['#value'] = t("Submit");
    }
}

function estimate_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id){
    $form['actions']['submit']['#value'] = t("Submit");
    unset($form['account']['mail']['#description']);
}

function estimate_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id){
    if (check_admin()) return;

    foreach (\CUSTOM_USER_FIELDS as $form_field){
        if ($form_field !== 'field_estimator_id' && $form_field !== 'field_com_name_us' && $form_field !== 'field_last_name' && $form_field !== 'field_first_name' && $form_field !== 'field_business_address' && $form_field !== 'field_number_of_shops') {
            $form[$form_field]['#access'] = false;
        }
    }
}

function estimate_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
    $view = views_get_current_view();
    $viewName = "";
    if (isset($view->element['#name'])){
        $viewName = $view->element['#name'];
    }

    $type = $node->bundle();
    if (($type == 'estimate' || $type == 'company') && !check_admin() && $viewName !== 'estimate_view') return AccessResult::forbidden();

    return AccessResult::neutral();
}

function estimate_views_pre_build(ViewExecutable $view){
    if ($view->id() != 'estimate_view') return;

    if (check_admin()){
        $view->argument = [];
    }
}

function estimate_query_views_estimate_view_alter(AlterableInterface &$query){
    // this code need to calculate the average date pickup_dt and arrival_dt
    $all_fields = $query->getFields();
    $all_expression = $query->getExpressions();

    $field = $all_fields['field_com_name_es_node_field_data__node__field_pickup_dt_fie'];
    $expression = $all_expression['field_com_name_es_node_field_data__node__field_arrival_dt_fi']['expression'];
    $pars_expression = explode("(", $expression);
    $pars_expression_part = explode(")", $pars_expression[1]);

    $field1 = $pars_expression[0] . "(UNIX_TIMESTAMP(str_to_date ({$field['table']} . {$field['field']}, '%a, %m/%d/%Y - %H:%i')) - UNIX_TIMESTAMP(str_to_date ($pars_expression_part[0], '%a, %m/%d/%Y - %H:%i')) )";

    $query->addExpression($field1,'avgCycleTime');

    // filter PickUp Date/Time
    $view=$query->getMetaData('view');

    $datetime = new DateTime(date('r',$view->exposed_data["current_period"]));
    $userInput = $view->getExposedInput();
    if (isset($userInput["field_pickup_dt_value"])) {
        if ($userInput["field_pickup_dt_value"] == 1) {
            $view->header["area"]->options["content"]["value"] = "Day: " . $datetime->format('d F Y');
        } elseif ($userInput["field_pickup_dt_value"] == 2) {
            $view->header["area"]->options["content"]["value"] = "Week: " . $datetime->format('W-Y');
        } elseif ($userInput["field_pickup_dt_value"] == 3) {
            $view->header["area"]->options["content"]["value"] = "Month: " . $datetime->format('F Y');
        } elseif ($userInput["field_pickup_dt_value"] == 4) {
            $view->header["area"]->options["content"]["value"] = "Year: " . $datetime->format('Y');
        } else {
            $view->header["area"]->options["content"]["value"] = 'All date';
        }
    } else {
        $view->header["area"]->options["content"]["value"] = "Month: " . $datetime->format('F Y');
    }
}
function estimate_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
    if ($form['#id'] !== "views-exposed-form-estimate-view-admin-page-1" and $form['#id'] !== 'views-exposed-form-estimate-view-page-1') return;

    if ($form['#id'] === 'views-exposed-form-estimate-view-page-1' || $form['#id'] === "views-exposed-form-estimate-view-admin-page-1") {
        // get all the company ids for user
        $companyIds = getUserCompanyIDs();
        $options['All'] = $form['field_com_name_es_target_id_verf']['#options']['All'];
        if (!empty($companyIds)) {
            foreach ($companyIds as $nid) {
                if (array_key_exists($nid, $form['field_com_name_es_target_id_verf']['#options'])) {
                    $options[$nid] = $form['field_com_name_es_target_id_verf']['#options'][$nid];
                }
            }
        }
        $form['field_com_name_es_target_id_verf']['#options'] = $options;
    }
    $userInput = $form_state->getUserInput();
    if (empty($userInput["current_period"]) || ($userInput["field_pickup_dt_value"] == 'All')) {
        $userInput["current_period"] = time();
        //set default filter "month"
        if (!isset($userInput["field_pickup_dt_value"])){
            $userInput["field_pickup_dt_value"] = 3;
        }
    }
    $sign = null;
    if (isset($userInput["change_period"])){
        if ($userInput["change_period"] == 1) {
            $sign = '+';
        } elseif ($userInput["change_period"] == 2) {
            $sign = '-';
        }
    }
    unset($userInput["change_period"]);
    $datetime = new DateTime(date('r', $userInput["current_period"]));

    $min = $max ='';
    if (isset($userInput["field_pickup_dt_value"])) {
        if ($userInput["field_pickup_dt_value"] == 1) {
            if ($sign) {
                $datetime->modify("{$sign}1 day");
            }
            $userInput["current_period"] = $datetime->getTimestamp();
            $datetime->setTime(0, 0, 0);
            $min = $datetime->format('m/d/Y H:i');
            $datetime->setTime(23, 59, 59);
            $max = $datetime->format('m/d/Y H:i');
        } elseif ($userInput["field_pickup_dt_value"] == 2) {
            if ($sign) {
                $datetime->modify("{$sign}1 week");
            }
            $userInput["current_period"] = $datetime->getTimestamp();
            $datetime->setTime(0, 0, 0);
            $datetime->modify('Last Monday');
            $min = $datetime->format('m/d/Y H:i');
            $datetime->modify('Next Sunday');
            $datetime->setTime(23, 59, 59);
            $max = $datetime->format('m/d/Y H:i');
        } elseif ($userInput["field_pickup_dt_value"] == 3) {
            if ($sign) {
                $datetime->modify("{$sign}1 month");
            }
            $userInput["current_period"] = $datetime->getTimestamp();
            $datetime->setTime(0, 0, 0);
            $datetime->setDate($datetime->format('Y'), $datetime->format('m'), 1);
            $min = $datetime->format('m/d/Y H:i');
            $datetime->setDate($datetime->format('Y'), $datetime->format('m'), $datetime->format('t'));
            $datetime->setTime(23, 59, 59);
            $max = $datetime->format('m/d/Y H:i');
        } elseif ($userInput["field_pickup_dt_value"] == 4) {
            if ($sign) {
                $datetime->modify("{$sign}1 year");
            }
            $userInput["current_period"] = $datetime->getTimestamp();
            $datetime->setTime(0, 0, 0);
            $datetime->setDate($datetime->format('Y'), 1, 1);
            $min = $datetime->format('m/d/Y H:i');
            $datetime->setTime(23, 59, 59);
            $datetime->setDate($datetime->format('Y'), 12, 31);
            $max = $datetime->format('m/d/Y H:i');
        }
    }
    $userInput["field_pickup_date_time_value"]["min"] = $min;
    $userInput["field_pickup_date_time_value"]["max"] = $max;

    $form_state->setUserInput($userInput);
}
function estimate_query_views_estimate_view_admin_alter(AlterableInterface &$query){
    // this code need to calculate the average date pickup_dt and arrival_dt
    $all_fields = $query->getFields();
    $all_expression = $query->getExpressions();

    $field = $all_fields['node__field_pickup_dt_field_pickup_dt_value'];
    $expression = $all_expression['node__field_arrival_dt_field_arrival_dt_value']['expression'];
    $pars_expression = explode("(", $expression);
    $pars_expression_part = explode(")", $pars_expression[1]);

    $field1 = $pars_expression[0] . "(UNIX_TIMESTAMP(str_to_date ({$field['table']} . {$field['field']}, '%a, %m/%d/%Y - %H:%i')) - UNIX_TIMESTAMP(str_to_date ($pars_expression_part[0], '%a, %m/%d/%Y - %H:%i')) )";

    $query->addExpression($field1,'avgCycleTime');

    // filter PickUp Date/Time
    $view=$query->getMetaData('view');

    $datetime = new DateTime(date('r',$view->exposed_data["current_period"]));
    $userInput = $view->getExposedInput();
    if (isset($userInput["field_pickup_dt_value"])) {
        if ($userInput["field_pickup_dt_value"] == 1) {
            $view->header["area"]->options["content"]["value"] = "Day: " . $datetime->format('d F Y');
        } elseif ($userInput["field_pickup_dt_value"] == 2) {
            $view->header["area"]->options["content"]["value"] = "Week: " . $datetime->format('W-Y');
        } elseif ($userInput["field_pickup_dt_value"] == 3) {
            $view->header["area"]->options["content"]["value"] = "Month: " . $datetime->format('F Y');
        } elseif ($userInput["field_pickup_dt_value"] == 4) {
            $view->header["area"]->options["content"]["value"] = "Year: " . $datetime->format('Y');
        } else {
            $view->header["area"]->options["content"]["value"] = 'All date';
        }
    } else {
        $view->header["area"]->options["content"]["value"] = "Month: " . $datetime->format('F Y');
    }
}

function clear_expose_filter_node_creation_codition(&$condition, $first = false){
    if (is_array($condition) && !empty($condition['field'])){
        if ($condition['field'] == NODE_CREATION_FIELD){
            return null;
        }
        return $condition;
    }
    if ($first){
        $conditions = &$condition;
    } else {
        $conditions = $condition->conditions();
    }
    foreach ($conditions as $key => &$cond){
        if (is_array($cond)){
            if (is_object($cond['field'])){
                clear_expose_filter_node_creation_codition($cond['field']->conditions(), 1);
                continue;
            }
            $cond = clear_expose_filter_node_creation_codition($cond);
            if (is_null($cond)) unset($conditions[$key]);
        }
    }
}

function estimate_views_pre_render(ViewExecutable $view){
    if ($view->id() == 'estimate_view') {
        return _calcResultUserView($view);
    }

    if ($view->id() == 'estimate_view_admin') {
        return _calcResultAdminView($view);
    }
    return $view;
}

function _calcResultUserView($view){
    // added style and js to dials
    $view->element['#attached']['library'][] = 'estimate/dashboard_style';

    $time_period = $view->exposed_data['field_pickup_dt_value'];
    $holidays = array();
    $countDays = 0;
    switch ($time_period) {
        case 'All':
            $countDays = countDays("2000-01-01", date("Y-m-d"), $holidays);
            break;
        case '+1 day':
            $countDays = 1;
            break;
        case '+1 week':
            $countDays = 5;
            break;
        case '+1 month':
            $countDays = countDaysMounth(date("Y"), date("m"), array(0, 6)); ;
            break;
        case '+1 year':
            $countDays = countDays(date("Y").'-01-01', date("Y").'-12-31', $holidays);
            break;
    }

    foreach ($view->result as $resultRow){
        // convert datetime to unix
        if ($view->exposed_data['field_pickup_dt_value'] === 'All'){
            // Drupal default minimal value, that equals 1 Jan 1970
            $min = 26260000;
            $max = $view->exposed_data['current_period'];
        } else {
            $date_time = new DrupalDateTime($view->exposed_data['field_pickup_date_time_value']['min'], new \DateTimeZone('UTC'));
            $min = $date_time->getTimestamp();
            $date_time = new DrupalDateTime($view->exposed_data['field_pickup_date_time_value']['max'], new \DateTimeZone('UTC'));
            $max = $date_time->getTimestamp();
        }
        // get all company ids for current user
        $companyIds = getUserCompanyIDs();
        // this query need to count of Estimates with a Unique Estimate Alt ID, AND field ROClosed = True
        $query = \Drupal::database()->select('node__field_esaltid', 'aid');
        $query->distinct();

        $query->fields('aid',   ['field_esaltid_value']);
        $query->fields('pdt',   ['field_pickup_date_time_value']);
        $query->fields('nfc',   ['field_com_name_es_target_id']);

        $query->join('node__field_pickup_date_time', 'pdt', 'pdt.entity_id = aid.entity_id');
        $query->join('node__field_roclosed', 'rc', 'rc.entity_id = aid.entity_id');
        $query->join('node__field_com_name_es', 'nfc', 'nfc.entity_id = aid.entity_id');

        $query->condition('aid.bundle', 'estimate');
        $query->condition('pdt.bundle', 'estimate');
        $query->condition('rc.bundle', 'estimate');
        $query->condition('rc.field_roclosed_value', 1);
        $query->condition('nfc.field_com_name_es_target_id' , $companyIds , 'IN');

        $query->where("UNIX_TIMESTAMP(STR_TO_DATE([pdt].[field_pickup_date_time_value], '%Y-%m-%dT%H:%i:%s')) BETWEEN {$min} AND {$max}");

        $uniqueIds = $query->countQuery()->execute()->fetch();

        $valuesOfCalculations = [];

        $count_estimates = $resultRow->field_com_name_es_node_field_data_nid;
        $sales_collision_sum = $resultRow->field_com_name_es_node_field_data__node__field_totalamt_fiel ?? 0;

        $avgSquareFoot = $severity = $body_hourse = $paint_hourse = $labor_hours = 0;
        if($count_estimates > 0){
            //Square Foot Efficiency
            $avgSquareFoot = $resultRow->node_field_data_user__field_com_name_us__node__field_square_ ? ($sales_collision_sum / $count_estimates) /
                $resultRow->node_field_data_user__field_com_name_us__node__field_square_ : 0;

            // Severity
            $severity = round($sales_collision_sum / $count_estimates, 3);

            // Body Hours / RO
            $body_hourse = round($resultRow->field_com_name_es_node_field_data__node__field_totalhours_b_ / $count_estimates, 3);

            // Paint Hours / RO
            $paint_hourse = round($resultRow->field_com_name_es_node_field_data__node__field_totalhours_p_ / $count_estimates, 3);

            // Labor Hours / RO
            $labor_sum_labor_hours = 0;
            foreach (XML::SALES_LABOR as $type => $not_used){
                $type = strtolower($type);
                $field1 = 'field_com_name_es_node_field_data__node__field_'.$type.'_hours_fie';
                $field2 = 'field_com_name_es_node_field_data__node__field_'.$type.'_hours_fi';
                if (isset($resultRow->$field1)){
                    $labor_sum_labor_hours += $resultRow->$field1;

                }
                if (isset($resultRow->$field2)){
                    $labor_sum_labor_hours += $resultRow->$field2;
                }

            }
            $labor_hours = round($labor_sum_labor_hours / $count_estimates, 3);
        }

        $labor_ratio = $parts_ratio = $sublet_ratio = $parts_sum = 0;
        if($sales_collision_sum > 0){
            // Labor Ratio
            $labor_sum = 0;
            foreach (XML::SALES_LABOR as $type => $not_used){
                $type = strtolower($type);
                $field1 = 'field_com_name_es_node_field_data__node__field_'.$type.'_amount_fi';
                $field2 = 'field_com_name_es_node_field_data__node__field_'.$type.'_amount_f';
                if (isset($resultRow->$field1)){
                    $labor_sum += $resultRow->$field1;
                }
                if (isset($resultRow->$field2)){
                    $labor_sum += $resultRow->$field2;
                }
            }
            $labor_ratio = round($labor_sum / $sales_collision_sum, 3);

            // Parts Ratio
            $parts_sum = 0;
            foreach (XML::SALES_PARTS as $type => $not_used){
                $type = strtolower($type);
                $field1 = 'field_com_name_es_node_field_data__node__field_pt_'.$type.'_field_';
                $field2 = 'field_com_name_es_node_field_data__node__field_pt_'.$type.'_field';
                if (isset($resultRow->$field1)){
                    $parts_sum += $resultRow->$field1;
                }
                if (isset($resultRow->$field2)){
                    $parts_sum += $resultRow->$field2;
                }
            }
            $parts_ratio = round($parts_sum / $sales_collision_sum, 3);

            // Sublet Ratio
            $sublet_ratio = round($resultRow->field_com_name_es_node_field_data__node__field_pt_pas_field_ / $sales_collision_sum, 3);
        }

        // Repair / Replace Ratio
        $labor_sum_op9_op10 = $labor_sum_op11 = 0;
        foreach (XML::SALES_LABOR as $type => $not_used){
            $type = strtolower($type);
            $field1 = 'field_com_name_es_node_field_data__node__field_' . $type . '_amount_fi';
            $field2 = 'field_com_name_es_node_field_data__node__field_' . $type . '_amount_f';
            if ($type == 'op9' || $type == 'op10'){
                if (isset($resultRow->$field1)) {
                    $labor_sum_op9_op10 += $resultRow->$field1;
                }
                if (isset($resultRow->$field2)) {
                    $labor_sum_op9_op10 += $resultRow->$field2;
                }
            }
            if ($type == 'op11'){
                if (isset($resultRow->$field1)) {
                    $labor_sum_op11 += $resultRow->$field1;
                }
                if (isset($resultRow->$field2)) {
                    $labor_sum_op11 += $resultRow->$field2;
                }
            }
        }
        $repair_ratio = $labor_sum_op11 > 0 ? round($labor_sum_op9_op10/ $labor_sum_op11,3) : 0;

        // New / Used / LKQ
        $parts_sum_new = $parts_sum_used = $parts_sum_lkq = 0;
        foreach (XML::SALES_PARTS as $type => $not_used){
            $type = strtolower($type);
            $field1 = 'field_com_name_es_node_field_data__node__field_pt_'.$type.'_field_';
            $field2 = 'field_com_name_es_node_field_data__node__field_pt_'.$type.'_field';
            if ($type == 'pan' || $type == 'pand' || $type == 'pap') {
                if (isset($resultRow->$field1)) {
                    $parts_sum_new += $resultRow->$field1;
                }
                if ($type == 'pand' and isset($resultRow->$field2)) {
                    $parts_sum_new += $resultRow->$field2;
                }
            }
            if ($type == 'pal' || $type == 'par' || $type == 'pam') {
                if (isset($resultRow->$field1)) {
                    $parts_sum_used += $resultRow->$field1;
                }
            }
            if ($type == 'paa') {
                if (isset($resultRow->$field1)) {
                    $parts_sum_lkq += $resultRow->$field1;
                }
            }
        }
        if ($parts_sum > 0){
            $parts_sum_new = round($parts_sum_new / $parts_sum, 3);
            $parts_sum_used = round($parts_sum_used / $parts_sum, 3);
            $parts_sum_lkq = round($parts_sum_lkq / $parts_sum, 3);
        }

        // New / Used / LKQ
        $resultRow->field_com_name_es_node_field_data__node__field_esaltid_field = ($parts_sum_new / ($parts_sum_new + $parts_sum_used + $parts_sum_lkq)).'/'.($parts_sum_used / ($parts_sum_new + $parts_sum_used + $parts_sum_lkq)).'/'.($parts_sum_lkq / ($parts_sum_new + $parts_sum_used + $parts_sum_lkq));
        $valuesOfCalculations['new'] = round(($parts_sum_new / ($parts_sum_new + $parts_sum_used + $parts_sum_lkq)),3);
        $valuesOfCalculations['used'] = round(($parts_sum_used / ($parts_sum_new + $parts_sum_used + $parts_sum_lkq)),3);
        $valuesOfCalculations['lkq'] = round(($parts_sum_lkq / ($parts_sum_new + $parts_sum_used + $parts_sum_lkq)),3);

        // Repair / Replace Ratio
        $valuesOfCalculations['field_rrratio'] = $resultRow->field_com_name_es_node_field_data__node__field_pt_pag_field_ = $repair_ratio;

        // Cycle Time
        $valuesOfCalculations['field_cycle_time'] = $resultRow->field_com_name_es_node_field_data__node__field_arrival_dt_fi = round(($resultRow->avgCycleTime ?? 0 / 86400), 3);

        // Throughput
        $valuesOfCalculations['field_throughput'] = $resultRow->field_com_name_es_node_field_data__node__field_creationdt_fi = round($uniqueIds->expression/ $countDays, 3);

        //Square Foot Efficiency
        $valuesOfCalculations['field_sq_foot'] = $resultRow->node_field_data_user__field_com_name_us__node__field_square_ = round($avgSquareFoot,3);

        // Severity
        $valuesOfCalculations['field_severity'] = $resultRow->field_com_name_es_node_field_data__node__field_totalamt_p_fi = $severity;

        // Labor Ratio
        $valuesOfCalculations['field_labor_ratio'] = $resultRow->field_com_name_es_node_field_data__node__field_op4_amount_fi = $labor_ratio;

        // Parts Ratio
        $valuesOfCalculations['field_parts_ratio'] = $resultRow->field_com_name_es_node_field_data__node__field_pt_paa_field_ = $parts_ratio;

        // Body Hours / RO
        $valuesOfCalculations['field_sratio'] = $resultRow->field_com_name_es_node_field_data__node__field_totalhours_b_ = $body_hourse;

        // Paint Hours / RO
        $valuesOfCalculations['field_bhro'] = $resultRow->field_com_name_es_node_field_data__node__field_totalhours_p_ = $paint_hourse;

        // Labor Hours / RO
        $valuesOfCalculations['field_phro'] = $resultRow->field_com_name_es_node_field_data__node__field_op4_hours_fie = $labor_hours;

        // Sublet Ratio
        $valuesOfCalculations['field_lhro'] = $resultRow->field_com_name_es_node_field_data__node__field_op16_amount_f = $sublet_ratio;

        $view->result[1] = clone $resultRow;
        $view->result[2] = clone $resultRow;
        $view->result[3] = clone $resultRow;
        $view->result[4] = clone $resultRow;
    }

    $fields = getUserFields();

    // add rows with min and max value
    foreach ($view->result as $key => $resultRow) {
        if ($key !== 2) {
            switch ($key) {
                case 0:
                    $value = 'min';
                    break;
                case 1:
                    $value = 'low';
                    break;
                case 3:
                    $value = 'high';
                    break;
                case 4:
                    $value = 'max';
                    break;
            }
            // Cycle Time
            $resultRow->field_com_name_es_node_field_data__node__field_arrival_dt_fi = $fields['field_cycle_time_' . $value];

            //Throughput
            $resultRow->field_com_name_es_node_field_data__node__field_creationdt_fi = $fields['field_throughput_' . $value];

            //Square Foot Efficiency
            $resultRow->node_field_data_user__field_com_name_us__node__field_square_ = $fields['field_sq_foot_' . $value];

            // Severity
            $resultRow->field_com_name_es_node_field_data__node__field_totalamt_p_fi = $fields['field_severity_' . $value];

            // Labor Ratio
            $resultRow->field_com_name_es_node_field_data__node__field_op4_amount_fi = $fields['field_labor_ratio_' . $value];

            // Parts Ratio
            $resultRow->field_com_name_es_node_field_data__node__field_pt_paa_field_ = $fields['field_parts_ratio_' . $value];

            // Sublet Ratio
            $resultRow->field_com_name_es_node_field_data__node__field_op16_amount_f = $fields['field_sratio_' . $value];

            // New / Used / LKQ
            $resultRow->field_com_name_es_node_field_data__node__field_esaltid_field = $fields['field_new_' . $value] . '/' . $fields['field_used_' . $value] . '/' . $fields['field_lkq_' . $value];

            // Body Hours / RO
            $resultRow->field_com_name_es_node_field_data__node__field_totalhours_b_ = $fields['field_bhro_' . $value];

            // Paint Hours / RO
            $resultRow->field_com_name_es_node_field_data__node__field_totalhours_p_ = $fields['field_phro_' . $value];

            // Labor Hours / RO
            $resultRow->field_com_name_es_node_field_data__node__field_op4_hours_fie = $fields['field_lhro_' . $value];

            // Repair / Replace Ratio
            $resultRow->field_com_name_es_node_field_data__node__field_pt_pag_field_ = $fields['field_rrratio_' . $value];
        }
        $footer = $view->footer['area_1'];
        if (!empty($footer)){
            $footer->options['content']['value'] = createHtmlDial($fields, $valuesOfCalculations);
        }
    }

    return $view;
}

function _calcResultAdminView($view){
    // added style and js to dials
    $view->element['#attached']['library'][] = 'estimate/dashboard_style';

    $time_period = $view->exposed_data['field_pickup_dt_value'];
    $holidays = array();
    $countDays = 0;
    switch ($time_period) {
        case 'All':
            $countDays = countDays("2000-01-01", date("Y-m-d"), $holidays);
            break;
        case '+1 day':
            $countDays = 1;
            break;
        case '+1 week':
            $countDays = 5;
            break;
        case '+1 month':
            $countDays = countDaysMounth(date("Y"), date("m"), array(0, 6)); ;
            break;
        case '+1 year':
            $countDays = countDays(date("Y").'-01-01', date("Y").'-12-31', $holidays);
            break;
    }

    foreach ($view->result as $resultRow){
        // convert datetime to unix
        if ($view->exposed_data['field_pickup_dt_value'] === 'All'){
            // Drupal default minimal value, that equals 1 Jan 1970
            $min = 26260000;
            $max = $view->exposed_data['current_period'];
        } else {
            $date_time = new DrupalDateTime($view->exposed_data['field_pickup_date_time_value']['min'], new \DateTimeZone('UTC'));
            $min = $date_time->getTimestamp();
            $date_time = new DrupalDateTime($view->exposed_data['field_pickup_date_time_value']['max'], new \DateTimeZone('UTC'));
            $max = $date_time->getTimestamp();
        }

        $query = \Drupal::database()->select('node__field_esaltid', 'aid');
        $query->distinct();

        $query->fields('aid',   ['field_esaltid_value']);
        $query->fields('pdt',   ['field_pickup_date_time_value']);
        $query->join('node__field_pickup_date_time', 'pdt', 'pdt.entity_id = aid.entity_id');
        $query->join('node__field_roclosed', 'rc', 'rc.entity_id = aid.entity_id');

        $query->join('node__field_pickup_date_time', 'pdt', 'pdt.bundle = aid.bundle');
        $query->join('node__field_roclosed', 'rc', 'rc.bundle = aid.bundle');

        $query->condition('aid.bundle', 'estimate');
        $query->condition('pdt.bundle', 'estimate');
        $query->condition('rc.bundle', 'estimate');
        $query->condition('rc.field_roclosed_value', 1);
        $query->where("UNIX_TIMESTAMP(STR_TO_DATE([pdt].[field_pickup_date_time_value], '%Y-%m-%dT%H:%i:%s')) BETWEEN {$min} AND {$max}");

        $uniqueIds = $query->countQuery()->execute()->fetch();

        $valuesOfCalculations = [];

        $count_estimates = $resultRow->nid;
        $sales_collision_sum = $resultRow->node__field_totalamt_field_totalamt_value ?? 0;

        $avgSquareFoot = $severity = $body_hourse = $paint_hourse = $labor_hours = 0;
        if($count_estimates > 0) {
            //Square Foot Efficiency
            $avgSquareFoot = $resultRow->node_field_data_node__field_com_name_es__node__field_square_ ? ($sales_collision_sum / $count_estimates) /
                $resultRow->node_field_data_node__field_com_name_es__node__field_square_ : 0;

            // Severity
            $severity = round($sales_collision_sum / $count_estimates, 3);

            // Body Hours / RO
            $body_hourse = round($resultRow->node__field_totalhours_b_field_totalhours_b_value / $count_estimates, 3);

            // Paint Hours / RO
            $paint_hourse = round($resultRow->node__field_totalhours_p_field_totalhours_p_value / $count_estimates, 3);

            // Labor Hours / RO
            $labor_sum_labor_hours = 0;
            foreach (XML::SALES_LABOR as $type => $not_used) {
                $type = strtolower($type);
                $field1 = 'node__field_' . $type . '_hours_field_' . $type . '_hours_value';
                if (isset($resultRow->$field1)) {
                    $labor_sum_labor_hours += $resultRow->$field1;
                }
                $labor_hours = round($labor_sum_labor_hours / $count_estimates, 3);
            }
        }

        $labor_ratio = $parts_ratio = $sublet_ratio = $parts_sum = 0;
        if($sales_collision_sum > 0){
            // Labor Ratio
            $labor_sum = 0;
            foreach (XML::SALES_LABOR as $type => $not_used){
                $type = strtolower($type);
                $field = 'node__field_'.$type.'_amount_field_'.$type.'_amount_value';
                if (isset($resultRow->$field)){
                    $labor_sum += $resultRow->$field;
                }
            }
            $labor_ratio = round($labor_sum / $sales_collision_sum, 3);

            // Parts Ratio
            $parts_sum = 0;
            foreach (XML::SALES_PARTS as $type => $not_used){
                $type = strtolower($type);
                $field = 'node__field_pt_'.$type.'_field_pt_'.$type.'_value';
                if (isset($resultRow->$field)){
                    $parts_sum += $resultRow->$field;
                }
            }
            $parts_ratio = round($parts_sum / $sales_collision_sum, 3);

            // Sublet Ratio
            $sublet_ratio = round($resultRow->node__field_pt_pas_field_pt_pas_value / $sales_collision_sum, 3);
        }

        // Repair / Replace Ratio
        $labor_sum_op9_op10 = $labor_sum_op11 = 0;
        foreach (XML::SALES_LABOR as $type => $not_used){
            $type = strtolower($type);
            $field1 = 'node__field_'.$type.'_amount_field_'.$type.'_amount_value';
            if ($type == 'op9' || $type == 'op10'){
                if (isset($resultRow->$field1)) {
                    $labor_sum_op9_op10 += $resultRow->$field1;
                }
            }
            if ($type == 'op11'){
                if (isset($resultRow->$field1)) {
                    $labor_sum_op11 += $resultRow->$field1;
                }
            }
        }
        $repair_ratio = $labor_sum_op11 > 0 ? round($labor_sum_op9_op10/ $labor_sum_op11,3) : 0;

        // New / Used / LKQ
        $parts_sum_new = $parts_sum_used = $parts_sum_lkq = 0;
        foreach (XML::SALES_PARTS as $type => $not_used){
            $type = strtolower($type);
            $field = 'node__field_pt_'.$type.'_field_pt_'.$type.'_value';
            if ($type == 'pan' || $type == 'pand' || $type == 'pap') {
                if (isset($resultRow->$field)) {
                    $parts_sum_new += $resultRow->$field;
                }
            }
            if ($type == 'pal' || $type == 'par' || $type == 'pam') {
                if (isset($resultRow->$field)) {
                    $parts_sum_used += $resultRow->$field;
                }
            }
            if ($type == 'paa') {
                if (isset($resultRow->$field)) {
                    $parts_sum_lkq += $resultRow->$field;
                }
            }
        }
        if ($parts_sum > 0){
            $parts_sum_new = round($parts_sum_new / $parts_sum, 3);
            $parts_sum_used = round($parts_sum_used / $parts_sum, 3);
            $parts_sum_lkq = round($parts_sum_lkq / $parts_sum, 3);
        }

        // New / Used / LKQ
        $resultRow->node__field_esaltid_field_esaltid_value = ($parts_sum_new / ($parts_sum_new + $parts_sum_used + $parts_sum_lkq)).'/'.($parts_sum_used / ($parts_sum_new + $parts_sum_used + $parts_sum_lkq)).'/'.($parts_sum_lkq / ($parts_sum_new + $parts_sum_used + $parts_sum_lkq));
        $valuesOfCalculations['new'] = round(($parts_sum_new / ($parts_sum_new + $parts_sum_used + $parts_sum_lkq)),3);
        $valuesOfCalculations['used'] = round(($parts_sum_used / ($parts_sum_new + $parts_sum_used + $parts_sum_lkq)),3);
        $valuesOfCalculations['lkq'] = round(($parts_sum_lkq / ($parts_sum_new + $parts_sum_used + $parts_sum_lkq)),3);

        // Repair / Replace Ratio
        $valuesOfCalculations['field_rrratio'] = $resultRow->node__field_op16_hours_field_op16_hours_value = $repair_ratio;

        // Cycle Time
        $valuesOfCalculations['field_cycle_time'] = $resultRow->node__field_arrival_dt_field_arrival_dt_value = round(($resultRow->avgCycleTime ?? 0 / 86400), 3);

        // Throughput
        $valuesOfCalculations['field_throughput'] = $resultRow->node__field_creationdt_field_creationdt_value = round($uniqueIds->expression / $countDays, 3);

        //Square Foot Efficiency
        $valuesOfCalculations['field_sq_foot'] = $resultRow->node_field_data_node__field_com_name_es__node__field_square_ = round($avgSquareFoot,3);

        // Severity
        $valuesOfCalculations['field_severity'] = $resultRow->node__field_totalamt_p_field_totalamt_p_value = $severity;

        // Labor Ratio
        $valuesOfCalculations['field_labor_ratio'] = $resultRow->node__field_op4_amount_field_op4_amount_value = $labor_ratio;

        // Parts Ratio
        $valuesOfCalculations['field_parts_ratio'] = $resultRow->node__field_pt_paa_field_pt_paa_value = $parts_ratio;

        // Sublet Ratio
        $valuesOfCalculations['field_sratio'] = $resultRow->node__field_op16_amount_field_op16_amount_value = $sublet_ratio;

        // Body Hours / RO
        $valuesOfCalculations['field_bhro'] = $resultRow->node__field_totalhours_b_field_totalhours_b_value = $body_hourse;

        // Paint Hours / RO
        $valuesOfCalculations['field_phro'] = $resultRow->node__field_totalhours_p_field_totalhours_p_value = $paint_hourse;

        // Labor Hours / RO
        $valuesOfCalculations['field_lhro'] = $resultRow->node__field_op4_hours_field_op4_hours_value = $labor_hours;

        $view->result[1] = clone $resultRow;
        $view->result[2] = clone $resultRow;
        $view->result[3] = clone $resultRow;
        $view->result[4] = clone $resultRow;
    }

    $fields = getUserFields();

    // add rows with min and max value
    foreach ($view->result as $key => $resultRow) {
        if ($key !== 2) {
            switch ($key) {
                case 0:
                    $value = 'min';
                    break;
                case 1:
                    $value = 'low';
                    break;
                case 3:
                    $value = 'high';
                    break;
                case 4:
                    $value = 'max';
                    break;
            }
            // Cycle Time
            $resultRow->node__field_arrival_dt_field_arrival_dt_value = $fields['field_cycle_time_' . $value];

            //Throughput
            $resultRow->node__field_creationdt_field_creationdt_value = $fields['field_throughput_' . $value];

            //Square Foot Efficiency
            $resultRow->node_field_data_node__field_com_name_es__node__field_square_ = $fields['field_sq_foot_' . $value];

            // Severity
            $resultRow->node__field_totalamt_p_field_totalamt_p_value = $fields['field_severity_' . $value];

            // Labor Ratio
            $resultRow->node__field_op4_amount_field_op4_amount_value = $fields['field_labor_ratio_' . $value];

            // Parts Ratio
            $resultRow->node__field_pt_paa_field_pt_paa_value = $fields['field_parts_ratio_' . $value];

            // Sublet Ratio
            $resultRow->node__field_op16_amount_field_op16_amount_value = $fields['field_sratio_' . $value];

            // New / Used / LKQ
            $resultRow->node__field_esaltid_field_esaltid_value = $fields['field_new_' . $value] . '/' . $fields['field_used_' . $value] . '/' . $fields['field_lkq_' . $value];

            // Body Hours / RO
            $resultRow->node__field_totalhours_b_field_totalhours_b_value = $fields['field_bhro_' . $value];

            // Paint Hours / RO
            $resultRow->node__field_totalhours_p_field_totalhours_p_value = $fields['field_phro_' . $value];

            // Labor Hours / RO
            $resultRow->node__field_op4_hours_field_op4_hours_value = $fields['field_lhro_' . $value];

            // Repair / Replace Ratio
            $resultRow->node__field_op16_hours_field_op16_hours_value = $fields['field_rrratio_' . $value];
        }
        $footer = $view->footer['area_1'];
        if (!empty($footer)){
            $footer->options['content']['value'] = createHtmlDial($fields, $valuesOfCalculations);
        }
    }

    return $view;
}

function estimate_preprocess_page(&$variables) {
    switch (\Drupal::service('path.current')->getPath()) {
        case '/estimate-view-admin' :
        {
            if (!check_admin()) {
                (new RedirectResponse('estimate-view'))->send();
                exit();
            }
            break;
        }
        case '/estimate-view' :
        {
            if (check_admin()) {
                (new RedirectResponse('estimate-view-admin'))->send();
                exit();
            }
            break;
        }
    }
}

function countDays($startDate,$endDate,$holidays){
    $endDate = strtotime($endDate);
    $startDate = strtotime($startDate);

    $days = ($endDate - $startDate) / 86400 + 1;

    $no_full_weeks = floor($days / 7);
    $no_remaining_days = fmod($days, 7);

    $the_first_day_of_week = date("N", $startDate);
    $the_last_day_of_week = date("N", $endDate);

    if ($the_first_day_of_week <= $the_last_day_of_week) {
        if ($the_first_day_of_week <= 6 && 6 <= $the_last_day_of_week) $no_remaining_days--;
        if ($the_first_day_of_week <= 7 && 7 <= $the_last_day_of_week) $no_remaining_days--;
    }
    else {
        if ($the_first_day_of_week == 7) {
            $no_remaining_days--;

            if ($the_last_day_of_week == 6) {
                $no_remaining_days--;
            }
        }
        else {
            $no_remaining_days -= 2;
        }
    }

    $workingDays = $no_full_weeks * 5;
    if ($no_remaining_days > 0 )
    {
        $workingDays += $no_remaining_days;
    }

    foreach($holidays as $holiday){
        $time_stamp=strtotime($holiday);
        if ($startDate <= $time_stamp && $time_stamp <= $endDate && date("N",$time_stamp) != 6 && date("N",$time_stamp) != 7)
            $workingDays--;
    }

    return $workingDays;
}

function countDaysMounth($year, $month, $ignore) {
    $count = 0;
    $counter = mktime(0, 0, 0, $month, 1, $year);
    while (date("n", $counter) == $month) {
        if (!in_array(date("w", $counter), $ignore)) {
            $count++;
        }
        $counter = strtotime("+1 day", $counter);
    }
    return $count;
}

// get values CUSTOM USER FIELDS
function getUserFields(){
    static $user_fields = null;
    if (is_null($user_fields)) {
        $user = User::load(\Drupal::currentUser()->id());

        foreach (\CUSTOM_USER_FIELDS as $field) {
            $user_fields[$field] = $user->$field->value;
        }
    }
    return $user_fields;
}

// adds default values in CUSTOM user profile fields
function setValueFields() {
    $account = User::load(1);

    $definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('user', 'user');

    foreach (\CUSTOM_USER_FIELDS as $field) {
        if ($field !== 'field_estimator_id' && $field !== 'field_com_name_us' && $field !== 'field_last_name' && $field !== 'field_first_name' && $field !== 'field_business_address' && $field !== 'field_number_of_shops') {
            if (isset($definitions[$field])) {
                $result = $definitions[$field]->getDefaultValueLiteral();
                $account->set($field, $result[0]['value']);
            }
        }
    }

    $account->save();
}
function getUserCompanyIDs(){
    // get user id
    static $ids = null;
    if (is_null($ids)) {
        $userId = \Drupal::currentUser()->id();

        $query = \Drupal::database()->select('user__field_com_name_us', 'ucn');
        $query->fields('ucn', ['field_com_name_us_target_id']);
        $query->condition('ucn.entity_id', $userId);
        $companyIds = $query->execute()->fetchAll();
        foreach ($companyIds as $id) {
            $ids[] = $id->field_com_name_us_target_id;
        }
    }
    return $ids;
}

function insert_base64_encoded_image($path){
    $img = \Drupal::service('extension.list.module')->getPath('estimate').$path;
    $imageSize = getimagesize(\Drupal::service('extension.list.module')->getPath('estimate').$path);
    $imageData = base64_encode(file_get_contents($img));

    return "data:{$imageSize['mime']};base64,{$imageData}";
}

// creating dials
function createHtmlDial ($userFields, $valuesOfCalculations){
    // get arrow image
    $imageArrow = insert_base64_encoded_image('/images/arrow.png');
    $imageInfo = insert_base64_encoded_image('/images/info.png');
    $imageClose = insert_base64_encoded_image('/images/close.png');

    $storage_handler = \Drupal::entityTypeManager()->getStorage("node");
    $entities = $storage_handler->loadByProperties(["type" => "metric"]);
    $nodes = [];
    foreach ($entities as $entity) {
        $node = Node::load($entity->id());
        $field_title = $node->getTitle();

        $nodes[$field_title] = array(
            'title' => $node->getTitle(),
            'description' => $node->get('field_description')->getValue()
        );
    }

    $html = '<div id="allCanvas" class="allCanvas">
        <div  style="visibility: hidden">
        <img id="arrow" src="'.$imageArrow.'">
        </div>                  
        
        <div class="popup__bg"> 
            <div class="popup">
             <img class="close-popup" src="'.$imageClose.'">
                <div>
                    <p id="titlePopup"></p>
                </div>
                <div>
                    <p id="descriptionPopup"></p>
                </div>
            </div>
        </div>  
    
        <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-1" src="'.$imageInfo.'">
                </a> 
            </div>
            
            <div>
                <p class="canvasTitle">Cycle Time</p>
            </div>
            <canvas id="canvas-1" width="300" height="300"></canvas>
        </div>
            <span id="canvas-1-min" class="canvasSpan">'.$userFields['field_cycle_time_min'].'</span>
            <span id="canvas-1-max" class="canvasSpan">'.$userFields['field_cycle_time_max'].'</span>
            <span id="canvas-1-low" class="canvasSpan">'.$userFields['field_cycle_time_low'].'</span>
            <span id="canvas-1-high" class="canvasSpan">'.$userFields['field_cycle_time_high'].'</span>
            <span id="canvas-1-value" class="canvasSpan">'.$valuesOfCalculations['field_cycle_time'].'</span>
            <span id="canvas-1-title" class="canvasSpan">'.$nodes['Cycle Time']['title'].'</span>
            <span id="canvas-1-description" class="canvasSpan">'.$nodes['Cycle Time']['description'][0]['value'].'</span>
        <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-2" src="'.$imageInfo.'">
                </a> 
            </div>
            
            <div>
                <p class="canvasTitle">Throughput</p>
            </div>
            <canvas id="canvas-2" width="300" height="300"></canvas>
        </div>
            <span id="canvas-2-min" class="canvasSpan">'.$userFields['field_throughput_min'].'</span>
            <span id="canvas-2-max" class="canvasSpan">'.$userFields['field_throughput_max'].'</span>
            <span id="canvas-2-low" class="canvasSpan">'.$userFields['field_throughput_low'].'</span>
            <span id="canvas-2-high" class="canvasSpan">'.$userFields['field_throughput_high'].'</span>
            <span id="canvas-2-value" class="canvasSpan">'.$valuesOfCalculations['field_throughput'].'</span>
            <span id="canvas-2-title" class="canvasSpan">'.$nodes['Throughput']['title'].'</span>
            <span id="canvas-2-description" class="canvasSpan">'.$nodes['Throughput']['description'][0]['value'].'</span>
        <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-3" src="'.$imageInfo.'">
                </a>
            </div> 
             
            <div>
                <p class="canvasTitle">Square Foot Efficiency</p>
            </div>
            <canvas id="canvas-3" width="300" height="300"></canvas>
        </div>
            <span id="canvas-3-min" class="canvasSpan">'.$userFields['field_sq_foot_min'].'</span>
            <span id="canvas-3-max" class="canvasSpan">'.$userFields['field_sq_foot_max'].'</span>
            <span id="canvas-3-low" class="canvasSpan">'.$userFields['field_sq_foot_low'].'</span>
            <span id="canvas-3-high" class="canvasSpan">'.$userFields['field_sq_foot_high'].'</span>
            <span id="canvas-3-value" class="canvasSpan">'.$valuesOfCalculations['field_sq_foot'].'</span>
            <span id="canvas-3-title" class="canvasSpan">'.$nodes['Square Foot Efficiency']['title'].'</span>
            <span id="canvas-3-description" class="canvasSpan">'.$nodes['Square Foot Efficiency']['description'][0]['value'].'</span>
        <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-4" src="'.$imageInfo.'">
                </a> 
            </div>
            <div>
                <p class="canvasTitle">Severenity</p>
            </div>
            <canvas id="canvas-4" width="300" height="300"></canvas>
        </div>
            <span id="canvas-4-low" class="canvasSpan">'.$userFields['field_severity_low'].'</span>
            <span id="canvas-4-high" class="canvasSpan">'.$userFields['field_severity_high'].'</span>
            <span id="canvas-4-min" class="canvasSpan">'.$userFields['field_severity_min'].'</span>
            <span id="canvas-4-max" class="canvasSpan">'.$userFields['field_severity_max'].'</span>
            <span id="canvas-4-value" class="canvasSpan">'.$valuesOfCalculations['field_severity'].'</span>
            <span id="canvas-4-title" class="canvasSpan">'.$nodes['Severenity']['title'].'</span>
            <span id="canvas-4-description" class="canvasSpan">'.$nodes['Severenity']['description'][0]['value'].'</span>
        <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-5" src="'.$imageInfo.'">
                </a> 
            </div>
            <div>
                <p class="canvasTitle">Labor Ratio</p>
            </div>
            <canvas id="canvas-5" width="300" height="300"></canvas>
        </div>
            <span id="canvas-5-low" class="canvasSpan">'.$userFields['field_labor_ratio_low'].'</span>
            <span id="canvas-5-high" class="canvasSpan">'.$userFields['field_labor_ratio_high'].'</span>
            <span id="canvas-5-min" class="canvasSpan">'.$userFields['field_labor_ratio_min'].'</span>
            <span id="canvas-5-max" class="canvasSpan">'.$userFields['field_labor_ratio_max'].'</span>
            <span id="canvas-5-value" class="canvasSpan">'.$valuesOfCalculations['field_labor_ratio'].'</span>
            <span id="canvas-5-title" class="canvasSpan">'.$nodes['Labor Ratio']['title'].'</span>
            <span id="canvas-5-description" class="canvasSpan">'.$nodes['Labor Ratio']['description'][0]['value'].'</span>
        <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-6" src="'.$imageInfo.'">
                </a> 
            </div> 
            <div>
                <p class="canvasTitle">Parts Ratio</p>
            </div>
            <canvas id="canvas-6" width="300" height="300"></canvas>
        </div>
            <span id="canvas-6-min" class="canvasSpan">'.$userFields['field_parts_ratio_min'].'</span>
            <span id="canvas-6-max" class="canvasSpan">'.$userFields['field_parts_ratio_max'].'</span>
            <span id="canvas-6-low" class="canvasSpan">'.$userFields['field_parts_ratio_low'].'</span>
            <span id="canvas-6-high" class="canvasSpan">'.$userFields['field_parts_ratio_high'].'</span>
            <span id="canvas-6-value" class="canvasSpan">'.$valuesOfCalculations['field_parts_ratio'].'</span>
            <span id="canvas-6-title" class="canvasSpan">'.$nodes['Parts Ratio']['title'].'</span>
            <span id="canvas-6-description" class="canvasSpan">'.$nodes['Parts Ratio']['description'][0]['value'].'</span>
        <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-7" src="'.$imageInfo.'">
                </a> 
            </div>
            <div>
                <p class="canvasTitle">Sublet Ratio</p>
            </div>
            <canvas id="canvas-7" width="300" height="300"></canvas>
        </div>
            <span id="canvas-7-low" class="canvasSpan">'.$userFields['field_sratio_low'].'</span>
            <span id="canvas-7-high" class="canvasSpan">'.$userFields['field_sratio_high'].'</span>
            <span id="canvas-7-min" class="canvasSpan">'.$userFields['field_sratio_min'].'</span>
            <span id="canvas-7-max" class="canvasSpan">'.$userFields['field_sratio_max'].'</span>
            <span id="canvas-7-value" class="canvasSpan">'.$valuesOfCalculations['field_sratio'].'</span>
            <span id="canvas-7-title" class="canvasSpan">'.$nodes['Sublet Ratio']['title'].'</span>
            <span id="canvas-7-description" class="canvasSpan">'.$nodes['Sublet Ratio']['description'][0]['value'].'</span>
        <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-8" src="'.$imageInfo.'">
                </a> 
            </div>
            <div>
                <p class="canvasTitle">New Ratio</p>
            </div>
            <canvas id="canvas-8" width="300" height="300"></canvas>
        </div>
            <span id="canvas-8-max" class="canvasSpan">'.$userFields['field_new_max'].'</span>
            <span id="canvas-8-min" class="canvasSpan">'.$userFields['field_new_min'].'</span>
            <span id="canvas-8-low" class="canvasSpan">'.$userFields['field_new_low'].'</span>
            <span id="canvas-8-high" class="canvasSpan">'.$userFields['field_new_high'].'</span>
            <span id="canvas-8-value" class="canvasSpan">'.$valuesOfCalculations['new'].'</span>
            <span id="canvas-8-title" class="canvasSpan">'.$nodes['New Ratio']['title'].'</span>
            <span id="canvas-8-description" class="canvasSpan">'.$nodes['New Ratio']['description'][0]['value'].'</span>
         <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-9" src="'.$imageInfo.'">
                </a> 
            </div>
            <div>
                <p class="canvasTitle">Used Ratio</p>
            </div>
            <canvas id="canvas-9" width="300" height="300"></canvas>
        </div>
            <span id="canvas-9-max" class="canvasSpan">'.$userFields['field_used_max'].'</span>
            <span id="canvas-9-min" class="canvasSpan">'.$userFields['field_used_min'].'</span>
            <span id="canvas-9-low" class="canvasSpan">'.$userFields['field_used_low'].'</span>
            <span id="canvas-9-high" class="canvasSpan">'.$userFields['field_used_high'].'</span>
            <span id="canvas-9-value" class="canvasSpan">'.$valuesOfCalculations['used'].'</span>
            <span id="canvas-9-title" class="canvasSpan">'.$nodes['Used Ratio']['title'].'</span>
            <span id="canvas-9-description" class="canvasSpan">'.$nodes['Used Ratio']['description'][0]['value'].'</span>
         <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-10" src="'.$imageInfo.'">
                </a> 
            </div>
            <div>
                <p class="canvasTitle">LKQ Ratio</p>
            </div>
            <canvas id="canvas-10" width="300" height="300"></canvas>
        </div>
            <span id="canvas-10-max" class="canvasSpan">'.$userFields['field_lkq_max'].'</span>
            <span id="canvas-10-min" class="canvasSpan">'.$userFields['field_lkq_min'].'</span>
            <span id="canvas-10-low" class="canvasSpan">'.$userFields['field_lkq_low'].'</span>
            <span id="canvas-10-high" class="canvasSpan">'.$userFields['field_lkq_high'].'</span>
            <span id="canvas-10-value" class="canvasSpan">'.$valuesOfCalculations['lkq'].'</span> 
            <span id="canvas-10-title" class="canvasSpan">'.$nodes['LKQ Ratio']['title'].'</span>
            <span id="canvas-10-description" class="canvasSpan">'.$nodes['LKQ Ratio']['description'][0]['value'].'</span>   
        <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-11" src="'.$imageInfo.'">
                </a> 
            </div>
            <div>
                <p class="canvasTitle">Repair / Replace Ratio</p>
            </div>
            <canvas id="canvas-11" width="300" height="300"></canvas>
        </div>
            <span id="canvas-11-min" class="canvasSpan">'.$userFields['field_rrratio_min'].'</span>
            <span id="canvas-11-max" class="canvasSpan">'.$userFields['field_rrratio_max'].'</span>
            <span id="canvas-11-low" class="canvasSpan">'.$userFields['field_rrratio_low'].'</span>
            <span id="canvas-11-high" class="canvasSpan">'.$userFields['field_rrratio_high'].'</span>
            <span id="canvas-11-value" class="canvasSpan">'.$valuesOfCalculations['field_rrratio'].'</span>
            <span id="canvas-11-title" class="canvasSpan">'.$nodes['Repair / Replace Ratio']['title'].'</span>
            <span id="canvas-11-description" class="canvasSpan">'.$nodes['Repair / Replace Ratio']['description'][0]['value'].'</span>
        <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-12" src="'.$imageInfo.'">
                </a> 
            </div>
            <div>
                <p class="canvasTitle">Labor Hours / RO</p>
            </div>
            <canvas id="canvas-12" width="300" height="300"></canvas>
        </div>
            <span id="canvas-12-max" class="canvasSpan">'.$userFields['field_lhro_max'].'</span>
            <span id="canvas-12-min" class="canvasSpan">'.$userFields['field_lhro_min'].'</span>
            <span id="canvas-12-high" class="canvasSpan">'.$userFields['field_lhro_high'].'</span>
            <span id="canvas-12-low" class="canvasSpan">'.$userFields['field_lhro_low'].'</span>
            <span id="canvas-12-value" class="canvasSpan">'.$valuesOfCalculations['field_lhro'].'</span>
            <span id="canvas-12-title" class="canvasSpan">'.$nodes['Labor Hours / RO']['title'].'</span>
            <span id="canvas-12-description" class="canvasSpan">'.$nodes['Labor Hours / RO']['description'][0]['value'].'</span>
        <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-13" src="'.$imageInfo.'">
                </a> 
            </div>
            <div>
                <p class="canvasTitle">Paint Hours / RO</p>
            </div>
            <canvas id="canvas-13" width="300" height="300"></canvas>
        </div>
            <span id="canvas-13-max" class="canvasSpan">'.$userFields['field_phro_max'].'</span>
            <span id="canvas-13-min" class="canvasSpan">'.$userFields['field_phro_min'].'</span>
            <span id="canvas-13-high" class="canvasSpan">'.$userFields['field_phro_high'].'</span>
            <span id="canvas-13-low" class="canvasSpan">'.$userFields['field_phro_low'].'</span>
            <span id="canvas-13-value" class="canvasSpan">'.$valuesOfCalculations['field_phro'].'</span>
            <span id="canvas-13-title" class="canvasSpan">'.$nodes['Paint Hours / RO']['title'].'</span>
            <span id="canvas-13-description" class="canvasSpan">'.$nodes['Paint Hours / RO']['description'][0]['value'].'</span>
        <div class="canvasBlock">
            <div class="infoBlock">
                <a href="#" class="open-popup">
                <img id="image-info" class="canvas-14" src="'.$imageInfo.'">
                </a> 
            </div>
            <div>
                <p class="canvasTitle">Body Hours / RO</p>
            </div>
            <canvas id="canvas-14" width="300" height="300"></canvas>
        </div>
            <span id="canvas-14-low" class="canvasSpan">'.$userFields['field_bhro_low'].'</span>
            <span id="canvas-14-high" class="canvasSpan">'.$userFields['field_bhro_high'].'</span>
            <span id="canvas-14-min" class="canvasSpan">'.$userFields['field_bhro_min'].'</span>
            <span id="canvas-14-max" class="canvasSpan">'.$userFields['field_bhro_max'].'</span>
            <span id="canvas-14-value" class="canvasSpan">'.$valuesOfCalculations['field_bhro'].'</span>
            <span id="canvas-14-title" class="canvasSpan">'.$nodes['Body Hours / RO']['title'].'</span>
            <span id="canvas-14-description" class="canvasSpan">'.$nodes['Body Hours / RO']['description'][0]['value'].'</span>
    </div>';

    return $html;
}

function createNodesMetric() {
    // create nodes
    foreach (METRICS as $key => $metric){
        $nodeMetric = Node::create([
            'type'                 => 'metric',
            'title'                => $metric['title'],
            'field_description'    => '',
        ]);
        $nodeMetric->set('path', $metric['path']);
        $nodeMetric->save();
    }
}